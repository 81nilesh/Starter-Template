{"ast":null,"code":"// src/hydration.ts\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && {\n      scope: mutation.options.scope\n    }),\n    ...(mutation.meta && {\n      meta: mutation.meta\n    })\n  };\n}\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.meta && {\n      meta: query.meta\n    })\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\n\nfunction dehydrate(client) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const filterMutation = options.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n  const filterQuery = options.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query)] : []);\n  return {\n    mutations,\n    queries\n  };\n}\n\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(_ref => {\n    let {\n      state,\n      ...mutationOptions\n    } = _ref;\n    mutationCache.build(client, { ...options?.defaultOptions?.mutations,\n      ...mutationOptions\n    }, state);\n  });\n  queries.forEach(_ref2 => {\n    let {\n      queryKey,\n      state,\n      queryHash,\n      meta\n    } = _ref2;\n    const query = queryCache.get(queryHash);\n\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        const {\n          fetchStatus: _ignored,\n          ...dehydratedQueryState\n        } = state;\n        query.setState(dehydratedQueryState);\n      }\n\n      return;\n    }\n\n    queryCache.build(client, { ...options?.defaultOptions?.queries,\n      queryKey,\n      queryHash,\n      meta\n    }, // Reset fetch status to idle to avoid\n    // query being stuck in fetching state upon hydration\n    { ...state,\n      fetchStatus: \"idle\"\n    });\n  });\n}\n\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"mappings":"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","names":["dehydrateMutation","mutation","mutationKey","options","state","scope","meta","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","filterMutation","shouldDehydrateMutation","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","forEach","mutationOptions","build","defaultOptions","get","dataUpdatedAt","fetchStatus","_ignored","dehydratedQueryState","setState"],"sources":["/Users/apple/Desktop/Starter Template/client/node_modules/@tanstack/query-core/src/hydration.ts"],"sourcesContent":["import type {\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ?? defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ?? defaultShouldDehydrateQuery\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) => (filterQuery(query) ? [dehydrateQuery(query)] : []))\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta }) => {\n    const query = queryCache.get(queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...dehydratedQueryState } = state\n        query.setState(dehydratedQueryState)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n        meta,\n      },\n      // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      {\n        ...state,\n        fetchStatus: 'idle',\n      },\n    )\n  })\n}\n"]},"metadata":{},"sourceType":"module"}
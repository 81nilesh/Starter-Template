{"ast":null,"code":"// src/retryer.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { isServer, sleep } from \"./utils.js\";\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1e3 * 2 ** failureCount, 3e4);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode ?? \"online\") === \"online\" ? onlineManager.isOnline() : true;\n}\n\nvar CancelledError = class {\n  constructor(options) {\n    this.revert = options?.revert;\n    this.silent = options?.silent;\n  }\n\n};\n\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\n\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort?.();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const canContinue = () => focusManager.isFocused() && (config.networkMode === \"always\" || onlineManager.isOnline()) && config.canRun();\n\n  const canStart = () => canFetch(config.networkMode) && config.canRun();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess?.(value);\n      continueFn?.();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError?.(value);\n      continueFn?.();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || canContinue()) {\n          continueResolve(value);\n        }\n      };\n\n      config.onPause?.();\n    }).then(() => {\n      continueFn = void 0;\n\n      if (!isResolved) {\n        config.onContinue?.();\n      }\n    });\n  };\n\n  const run = () => {\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue;\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      if (isResolved) {\n        return;\n      }\n\n      const retry = config.retry ?? (isServer ? 0 : 3);\n      const retryDelay = config.retryDelay ?? defaultRetryDelay;\n      const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        reject(error);\n        return;\n      }\n\n      failureCount++;\n      config.onFail?.(failureCount, error);\n      sleep(delay).then(() => {\n        return canContinue() ? void 0 : pause();\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  };\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn?.();\n      return promise;\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      if (canStart()) {\n        run();\n      } else {\n        pause().then(run);\n      }\n\n      return promise;\n    }\n  };\n}\n\nexport { CancelledError, canFetch, createRetryer, isCancelledError };","map":{"version":3,"mappings":"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","names":["focusManager","onlineManager","isServer","sleep","defaultRetryDelay","failureCount","Math","min","canFetch","networkMode","isOnline","CancelledError","constructor","options","revert","silent","isCancelledError","value","createRetryer","config","isRetryCancelled","isResolved","continueFn","promiseResolve","promiseReject","promise","Promise","outerResolve","outerReject","cancel","cancelOptions","reject","abort","cancelRetry","continueRetry","canContinue","isFocused","canRun","canStart","resolve","onSuccess","onError","pause","continueResolve","onPause","then","onContinue","run","promiseOrValue","fn","error","catch","retry","retryDelay","delay","shouldRetry","onFail","continue","start"],"sources":["/Users/apple/Desktop/Starter Template/client/node_modules/@tanstack/query-core/src/retryer.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { isServer, sleep } from './utils'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n  canRun: () => boolean\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n  canStart: () => boolean\n  start: () => Promise<TData>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const canContinue = () =>\n    focusManager.isFocused() &&\n    (config.networkMode === 'always' || onlineManager.isOnline()) &&\n    config.canRun()\n\n  const canStart = () => canFetch(config.networkMode) && config.canRun()\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || canContinue()) {\n          continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            return canContinue() ? undefined : pause()\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn?.()\n      return promise\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      // Start loop\n      if (canStart()) {\n        run()\n      } else {\n        pause().then(run)\n      }\n      return promise\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
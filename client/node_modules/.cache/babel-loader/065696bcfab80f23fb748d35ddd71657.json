{"ast":null,"code":"// src/query.ts\nimport { noop, replaceData, skipToken, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar Query = class extends Removable {\n  #initialState;\n  #revertState;\n  #cache;\n  #retryer;\n  #defaultOptions;\n  #abortSignalConsumed;\n\n  constructor(config) {\n    super();\n    this.#abortSignalConsumed = false;\n    this.#defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.#cache = config.cache;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.#initialState = config.state || getDefaultState(this.options);\n    this.state = this.#initialState;\n    this.scheduleGc();\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setOptions(options) {\n    this.options = { ...this.#defaultOptions,\n      ...options\n    };\n    this.updateGcTime(this.options.gcTime);\n  }\n\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n      this.#cache.remove(this);\n    }\n  }\n\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options);\n    this.#dispatch({\n      data,\n      type: \"success\",\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual\n    });\n    return data;\n  }\n\n  setState(state, setStateOptions) {\n    this.#dispatch({\n      type: \"setState\",\n      state,\n      setStateOptions\n    });\n  }\n\n  cancel(options) {\n    const promise = this.#retryer?.promise;\n    this.#retryer?.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n\n  reset() {\n    this.destroy();\n    this.setState(this.#initialState);\n  }\n\n  isActive() {\n    return this.observers.some(observer => observer.options.enabled !== false);\n  }\n\n  isDisabled() {\n    return this.getObserversCount() > 0 && !this.isActive();\n  }\n\n  isStale() {\n    if (this.state.isInvalidated) {\n      return true;\n    }\n\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(observer => observer.getCurrentResult().isStale);\n    }\n\n    return this.state.data === void 0;\n  }\n\n  isStaleByTime() {\n    let staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n\n  onFocus() {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n    observer?.refetch({\n      cancelRefetch: false\n    });\n    this.#retryer?.continue();\n  }\n\n  onOnline() {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n    observer?.refetch({\n      cancelRefetch: false\n    });\n    this.#retryer?.continue();\n  }\n\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer);\n      this.clearGcTimeout();\n      this.#cache.notify({\n        type: \"observerAdded\",\n        query: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter(x => x !== observer);\n\n      if (!this.observers.length) {\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.#retryer.cancelRetry();\n          }\n        }\n\n        this.scheduleGc();\n      }\n\n      this.#cache.notify({\n        type: \"observerRemoved\",\n        query: this,\n        observer\n      });\n    }\n  }\n\n  getObserversCount() {\n    return this.observers.length;\n  }\n\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({\n        type: \"invalidate\"\n      });\n    }\n  }\n\n  fetch(options, fetchOptions) {\n    if (this.state.fetchStatus !== \"idle\") {\n      if (this.state.data !== void 0 && fetchOptions?.cancelRefetch) {\n        this.cancel({\n          silent: true\n        });\n      } else if (this.#retryer) {\n        this.#retryer.continueRetry();\n        return this.#retryer.promise;\n      }\n    }\n\n    if (options) {\n      this.setOptions(options);\n    }\n\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(`As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`);\n      }\n    }\n\n    const abortController = new AbortController();\n    const queryFnContext = {\n      queryKey: this.queryKey,\n      meta: this.meta\n    };\n\n    const addSignalProperty = object => {\n      Object.defineProperty(object, \"signal\", {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true;\n          return abortController.signal;\n        }\n      });\n    };\n\n    addSignalProperty(queryFnContext);\n\n    const fetchFn = () => {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (this.options.queryFn === skipToken) {\n          console.error(`Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${this.options.queryHash}'`);\n        }\n      }\n\n      if (!this.options.queryFn || this.options.queryFn === skipToken) {\n        return Promise.reject(new Error(`Missing queryFn: '${this.options.queryHash}'`));\n      }\n\n      this.#abortSignalConsumed = false;\n\n      if (this.options.persister) {\n        return this.options.persister(this.options.queryFn, queryFnContext, this);\n      }\n\n      return this.options.queryFn(queryFnContext);\n    };\n\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    this.options.behavior?.onFetch(context, this);\n    this.#revertState = this.state;\n\n    if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== context.fetchOptions?.meta) {\n      this.#dispatch({\n        type: \"fetch\",\n        meta: context.fetchOptions?.meta\n      });\n    }\n\n    const onError = error => {\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: \"error\",\n          error\n        });\n      }\n\n      if (!isCancelledError(error)) {\n        this.#cache.config.onError?.(error, this);\n        this.#cache.config.onSettled?.(this.state.data, error, this);\n      }\n\n      if (!this.isFetchingOptimistic) {\n        this.scheduleGc();\n      }\n\n      this.isFetchingOptimistic = false;\n    };\n\n    this.#retryer = createRetryer({\n      fn: context.fetchFn,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: data => {\n        if (data === void 0) {\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(`Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`);\n          }\n\n          onError(new Error(`${this.queryHash} data is undefined`));\n          return;\n        }\n\n        this.setData(data);\n        this.#cache.config.onSuccess?.(data, this);\n        this.#cache.config.onSettled?.(data, this.state.error, this);\n\n        if (!this.isFetchingOptimistic) {\n          this.scheduleGc();\n        }\n\n        this.isFetchingOptimistic = false;\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({\n          type: \"failed\",\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        this.#dispatch({\n          type: \"pause\"\n        });\n      },\n      onContinue: () => {\n        this.#dispatch({\n          type: \"continue\"\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true\n    });\n    return this.#retryer.start();\n  }\n\n  #dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case \"failed\":\n          return { ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error\n          };\n\n        case \"pause\":\n          return { ...state,\n            fetchStatus: \"paused\"\n          };\n\n        case \"continue\":\n          return { ...state,\n            fetchStatus: \"fetching\"\n          };\n\n        case \"fetch\":\n          return { ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null\n          };\n\n        case \"success\":\n          return { ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: \"success\",\n            ...(!action.manual && {\n              fetchStatus: \"idle\",\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            })\n          };\n\n        case \"error\":\n          const error = action.error;\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState,\n              fetchStatus: \"idle\"\n            };\n          }\n\n          return { ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: \"idle\",\n            status: \"error\"\n          };\n\n        case \"invalidate\":\n          return { ...state,\n            isInvalidated: true\n          };\n\n        case \"setState\":\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate();\n      });\n      this.#cache.notify({\n        query: this,\n        type: \"updated\",\n        action\n      });\n    });\n  }\n\n};\n\nfunction fetchState(data, options) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\",\n    ...(data === void 0 && {\n      error: null,\n      status: \"pending\"\n    })\n  };\n}\n\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  const hasData = data !== void 0;\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\n\nexport { Query, fetchState };","map":{"version":3,"mappings":"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","names":["noop","replaceData","skipToken","timeUntilStale","notifyManager","canFetch","createRetryer","isCancelledError","Removable","Query","constructor","config","defaultOptions","setOptions","options","observers","cache","queryKey","queryHash","state","getDefaultState","scheduleGc","meta","updateGcTime","gcTime","optionalRemove","length","fetchStatus","remove","setData","newData","data","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","promise","then","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isDisabled","getObserversCount","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","onFocus","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","shouldFetchOnReconnect","addObserver","includes","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","continueRetry","queryFn","process","env","NODE_ENV","Array","isArray","console","error","abortController","AbortController","queryFnContext","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","fetchFn","reject","Error","persister","context","behavior","onFetch","fetchMeta","onError","onSettled","isFetchingOptimistic","fn","abort","bind","onSuccess","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","canRun","start","action","reducer","fetchFailureCount","fetchFailureReason","fetchState","dataUpdateCount","Date","now","status","errorUpdateCount","errorUpdatedAt","batch","forEach","onQueryUpdate","initialData","hasData","initialDataUpdatedAt"],"sources":["/Users/apple/Desktop/Starter Template/client/node_modules/@tanstack/query-core/src/query.ts"],"sourcesContent":["import { noop, replaceData, skipToken, timeUntilStale } from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n  isFetchingOptimistic?: boolean\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = config.state || getDefaultState(this.options)\n    this.state = this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some((observer) => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      this.state.data === undefined ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Create query function context\n    const queryFnContext: OmitKeyof<\n      QueryFunctionContext<TQueryKey>,\n      'signal'\n    > = {\n      queryKey: this.queryKey,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this.options.queryFn === skipToken) {\n          console.error(\n            `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${this.options.queryHash}'`,\n          )\n        }\n      }\n\n      if (!this.options.queryFn || this.options.queryFn === skipToken) {\n        return Promise.reject(\n          new Error(`Missing queryFn: '${this.options.queryHash}'`),\n        )\n      }\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          this.options.queryFn,\n          queryFnContext as QueryFunctionContext<TQueryKey>,\n          this as unknown as Query,\n        )\n      }\n\n      return this.options.queryFn(\n        queryFnContext as QueryFunctionContext<TQueryKey>,\n      )\n    }\n\n    // Trigger behavior hook\n    const context: OmitKeyof<\n      FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      'signal'\n    > = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(\n      context as FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      this as unknown as Query,\n    )\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        this.setData(data)\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    return this.#retryer.start()\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error as TError,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n"]},"metadata":{},"sourceType":"module"}